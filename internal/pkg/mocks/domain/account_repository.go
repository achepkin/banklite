// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/achepkin/banklite/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) CreateAccount(_a0 context.Context, _a1 *entity.Account) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Account) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type AccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entity.Account
func (_e *AccountRepository_Expecter) CreateAccount(_a0 interface{}, _a1 interface{}) *AccountRepository_CreateAccount_Call {
	return &AccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0, _a1)}
}

func (_c *AccountRepository_CreateAccount_Call) Run(run func(_a0 context.Context, _a1 *entity.Account)) *AccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Account))
	})
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) Return(_a0 error) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) RunAndReturn(run func(context.Context, *entity.Account) error) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *AccountRepository) GetAccount(ctx context.Context, id string) (*entity.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountRepository_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *AccountRepository_Expecter) GetAccount(ctx interface{}, id interface{}) *AccountRepository_GetAccount_Call {
	return &AccountRepository_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *AccountRepository_GetAccount_Call) Run(run func(ctx context.Context, id string)) *AccountRepository_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AccountRepository_GetAccount_Call) Return(_a0 *entity.Account, _a1 error) *AccountRepository_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAccount_Call) RunAndReturn(run func(context.Context, string) (*entity.Account, error)) *AccountRepository_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: _a0
func (_m *AccountRepository) ListAccounts(_a0 context.Context) ([]*entity.Account, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []*entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type AccountRepository_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AccountRepository_Expecter) ListAccounts(_a0 interface{}) *AccountRepository_ListAccounts_Call {
	return &AccountRepository_ListAccounts_Call{Call: _e.mock.On("ListAccounts", _a0)}
}

func (_c *AccountRepository_ListAccounts_Call) Run(run func(_a0 context.Context)) *AccountRepository_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AccountRepository_ListAccounts_Call) Return(_a0 []*entity.Account, _a1 error) *AccountRepository_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_ListAccounts_Call) RunAndReturn(run func(context.Context) ([]*entity.Account, error)) *AccountRepository_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountRepository) UpdateAccount(account *entity.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type AccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - account *entity.Account
func (_e *AccountRepository_Expecter) UpdateAccount(account interface{}) *AccountRepository_UpdateAccount_Call {
	return &AccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", account)}
}

func (_c *AccountRepository_UpdateAccount_Call) Run(run func(account *entity.Account)) *AccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Account))
	})
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) Return(_a0 error) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) RunAndReturn(run func(*entity.Account) error) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
