// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/achepkin/banklite/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// TransactionValidator is an autogenerated mock type for the TransactionValidator type
type TransactionValidator struct {
	mock.Mock
}

type TransactionValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionValidator) EXPECT() *TransactionValidator_Expecter {
	return &TransactionValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: tx, account
func (_m *TransactionValidator) Validate(tx *entity.Transaction, account *entity.Account) error {
	ret := _m.Called(tx, account)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Transaction, *entity.Account) error); ok {
		r0 = rf(tx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type TransactionValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - tx *entity.Transaction
//   - account *entity.Account
func (_e *TransactionValidator_Expecter) Validate(tx interface{}, account interface{}) *TransactionValidator_Validate_Call {
	return &TransactionValidator_Validate_Call{Call: _e.mock.On("Validate", tx, account)}
}

func (_c *TransactionValidator_Validate_Call) Run(run func(tx *entity.Transaction, account *entity.Account)) *TransactionValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Transaction), args[1].(*entity.Account))
	})
	return _c
}

func (_c *TransactionValidator_Validate_Call) Return(_a0 error) *TransactionValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionValidator_Validate_Call) RunAndReturn(run func(*entity.Transaction, *entity.Account) error) *TransactionValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionValidator creates a new instance of TransactionValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionValidator {
	mock := &TransactionValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
