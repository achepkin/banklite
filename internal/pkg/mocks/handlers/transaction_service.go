// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/achepkin/banklite/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

type TransactionService_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionService) EXPECT() *TransactionService_Expecter {
	return &TransactionService_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, accountID, txType, amount
func (_m *TransactionService) CreateTransaction(ctx context.Context, accountID string, txType entity.TxType, amount float64) (*entity.Transaction, error) {
	ret := _m.Called(ctx, accountID, txType, amount)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.TxType, float64) (*entity.Transaction, error)); ok {
		return rf(ctx, accountID, txType, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.TxType, float64) *entity.Transaction); ok {
		r0 = rf(ctx, accountID, txType, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.TxType, float64) error); ok {
		r1 = rf(ctx, accountID, txType, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionService_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type TransactionService_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - txType entity.TxType
//   - amount float64
func (_e *TransactionService_Expecter) CreateTransaction(ctx interface{}, accountID interface{}, txType interface{}, amount interface{}) *TransactionService_CreateTransaction_Call {
	return &TransactionService_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, accountID, txType, amount)}
}

func (_c *TransactionService_CreateTransaction_Call) Run(run func(ctx context.Context, accountID string, txType entity.TxType, amount float64)) *TransactionService_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.TxType), args[3].(float64))
	})
	return _c
}

func (_c *TransactionService_CreateTransaction_Call) Return(_a0 *entity.Transaction, _a1 error) *TransactionService_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionService_CreateTransaction_Call) RunAndReturn(run func(context.Context, string, entity.TxType, float64) (*entity.Transaction, error)) *TransactionService_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, accountID
func (_m *TransactionService) GetTransactions(ctx context.Context, accountID string) ([]*entity.Transaction, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Transaction, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Transaction); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionService_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type TransactionService_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
func (_e *TransactionService_Expecter) GetTransactions(ctx interface{}, accountID interface{}) *TransactionService_GetTransactions_Call {
	return &TransactionService_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, accountID)}
}

func (_c *TransactionService_GetTransactions_Call) Run(run func(ctx context.Context, accountID string)) *TransactionService_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TransactionService_GetTransactions_Call) Return(_a0 []*entity.Transaction, _a1 error) *TransactionService_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionService_GetTransactions_Call) RunAndReturn(run func(context.Context, string) ([]*entity.Transaction, error)) *TransactionService_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: ctx, fromAccountID, toAccountID, amount
func (_m *TransactionService) Transfer(ctx context.Context, fromAccountID string, toAccountID string, amount float64) (*entity.Transfer, error) {
	ret := _m.Called(ctx, fromAccountID, toAccountID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *entity.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) (*entity.Transfer, error)); ok {
		return rf(ctx, fromAccountID, toAccountID, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *entity.Transfer); ok {
		r0 = rf(ctx, fromAccountID, toAccountID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, float64) error); ok {
		r1 = rf(ctx, fromAccountID, toAccountID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionService_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type TransactionService_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx context.Context
//   - fromAccountID string
//   - toAccountID string
//   - amount float64
func (_e *TransactionService_Expecter) Transfer(ctx interface{}, fromAccountID interface{}, toAccountID interface{}, amount interface{}) *TransactionService_Transfer_Call {
	return &TransactionService_Transfer_Call{Call: _e.mock.On("Transfer", ctx, fromAccountID, toAccountID, amount)}
}

func (_c *TransactionService_Transfer_Call) Run(run func(ctx context.Context, fromAccountID string, toAccountID string, amount float64)) *TransactionService_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *TransactionService_Transfer_Call) Return(_a0 *entity.Transfer, _a1 error) *TransactionService_Transfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionService_Transfer_Call) RunAndReturn(run func(context.Context, string, string, float64) (*entity.Transfer, error)) *TransactionService_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
